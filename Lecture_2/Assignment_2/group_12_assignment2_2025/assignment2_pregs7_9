{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ee6d19ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Pregunta 7:\n",
    "# Programa que recibe una temperatura en °C y devuelve un mensaje según el valor\n",
    "def evaluar_temperatura(temp_c):\n",
    "    if temp_c < 0:\n",
    "        return \"Está helando.\"\n",
    "    elif 0 <= temp_c <= 20:\n",
    "        return \"Hace frío.\"\n",
    "    elif 21 <= temp_c <= 30:\n",
    "        return \"Hace calor moderado.\"\n",
    "    else:  # temp_c > 30\n",
    "        return \"Hace mucho calor.\"\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3d16e595",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "It is freezing.\n",
      "It is cold.\n",
      "It is cold.\n"
     ]
    }
   ],
   "source": [
    "#Probamos con ejemplos:\n",
    "print(evaluar_temperatura(-3))   \n",
    "print(evaluar_temperatura(20))  \n",
    "print(evaluar_temperatura(25))   \n",
    "print(evaluar_temperatura(31))  \n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "006d8707",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Pregunta 8\n",
    "# La persona debe tener GPA > 3.5 y además:\n",
    "# - actividades extracurriculares = \"Yes\", o\n",
    "# - horas de servicio comunitario > 50\n",
    "def elegible_beca(gpa, extracurricular, horas_servicio):\n",
    "    if gpa > 3.5 and (extracurricular == \"Yes\" or horas_servicio > 50):\n",
    "        return \"Elegible para la beca.\"\n",
    "    else:\n",
    "        return \"No elegible para la beca.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f5028ec4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Elegible para la beca.\n",
      "Elegible para la beca.\n",
      "No elegible para la beca.\n"
     ]
    }
   ],
   "source": [
    "# Ejemplos\n",
    "print(elegible_beca(3.6, \"Yes\", 10))   \n",
    "print(elegible_beca(3.6, \"No\", 60))   \n",
    "print(elegible_beca(3.4, \"Yes\", 80))  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d5ad68d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "list1 is list2: False\n",
      "list1 is list3: True\n",
      "list1 == list2: True\n"
     ]
    }
   ],
   "source": [
    "# Pregunta 9\n",
    "list1 = [1, 2, 3]\n",
    "list2 = [1, 2, 3]\n",
    "list3 = list1 \n",
    "\n",
    "print(\"list1 is list2:\", list1 is list2)\n",
    "print(\"list1 is list3:\", list1 is list3)\n",
    "print(\"list1 == list2:\", list1 == list2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "007c05f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# is compara si dos variables apuntan al mismo objeto en memoria, mientras que == compara si tienen el mismo contenido. Por eso list1 is list2 da False, list1 is list3 da True y list1 == list2 da True."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
